package illusory0x0/prettyprinter

alias @illusory0x0/immut_deque as @immut_deque
alias @moonbitlang/core/string as @string

// Values
fn maximum[T : Compare](Iter[T]) -> T?

// Types and methods
type Doc
impl Doc {
  empty() -> Self
  envelop(Self, left~ : &IsString, right~ : &IsString) -> Self
  from_iter(Iter[Line]) -> Self
  from_line(Line) -> Self
  from_string(&IsString) -> Self
  height(Self) -> Int
  indent(Self, Int) -> Self
  indent_rest(Self, Int) -> Self
  join(Self, separator~ : &IsString) -> Line
  joinline(Self, separator~ : &IsString? = .., Self) -> Self
  lastline_width(Self) -> Int
  new(@immut_deque.T[Line]) -> Self
  vertical_concat(Self, Self) -> Self
  width(Self) -> Int
}
impl Show for Doc

type Line
impl Line {
  append(Self, Self) -> Self
  cons(Self, &IsString) -> Self
  empty() -> Self
  from_iter(indentation~ : Int = .., Iter[&IsString]) -> Self
  from_string(indentation~ : Int = .., &IsString) -> Self
  indent(Self, Int) -> Self
  iter(Self) -> Iter[&IsString]
  new(indentation~ : Int = .., @immut_deque.T[&IsString]) -> Self
  snoc(Self, &IsString) -> Self
  width(Self) -> Int
}

// Type aliases

// Traits
pub(open) trait IsString : Show {
  length(Self) -> Int
  write_string(Self, &Logger) -> Unit
}
impl IsString for String
impl IsString for @string.StringView

